// This file will be compiled into application.js during build time or using gulp watch.  Refer to README.
var CommentBox = React.createClass({
  handleCommentSubmit: function (comment) {
    var socket = this.props.data.socketService.getSocket();
    var identifier = this.props.data.identifier;
    var workspace = this.props.data.workspace;
    $.ajax({
      url: '/modules/api/jcr/v1/' + workspace + '/en/nodes/' + identifier + '/children/comment-' + Math.floor((Math.random() * 10000) + 1),
      type: 'put',
      contentType: "application/json",
      dataType: 'json',
      data: JSON.stringify({
        "type": "javaone:comment",
        "properties" : {
          "text" : {
            "value" : comment.text
          }
        }
      }),
      success: function(data) {
        socket.push(jQuery.stringifyJSON({text: data.properties.text.value}));
      }
    });
  },
  getInitialState: function() {
    return {
      data: {
        items: this.props.data.items
      }
    };
  },
  componentDidMount: function () {
    this.props.data.socketService.buildSocket(function (response) {
        var message = response.responseBody;
        try {
          var comments = this.state.data.items;
          var comment = jQuery.parseJSON(message);
          comments.push(comment.text);
          this.setState({
            data: {
              items: comments
            }
          });
        } catch (e) {
          console.log('This doesn\'t look like a valid JSON: ', message);
          return;
        }
    }.bind(this));
  },
  render: function() {
    return (
      <div>
        <h2>{this.props.data.title}</h2>
        <CommentList data={this.state.data.items} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
});

var CommentList = React.createClass({
  render: function () {
    var commentNodes = this.props.data.map(function (comment, index) {
      return <Comment key={index}>{comment}</Comment>;
    });
    return <div className="commentList">{commentNodes}</div>;
  }
});

var Comment = React.createClass({
  render: function () {
    return (
      <div className="comment">
        <span>{this.props.children.toString()}</span>
      </div>
    );
  }
});

var CommentForm = React.createClass({
  handleSubmit: function () {
    var text = this.refs.text.getDOMNode().value.trim();
    this.props.onCommentSubmit({text: text});
    this.refs.text.getDOMNode().value = '';
    return false;
  },
  render: function () {
    return (
      <form>
        <textarea ref="text"/>
        <input type="button" value="Post" onClick={this.handleSubmit}/>
      </form>
    );
  }
});

// Keep data items the same for both Server and Client side so the client doesn't rerender the mark up generated by Server.
renderServer = function (title, items, identifier, workspace) {
  var data = {
    title: title,
    items: items
  };
  return React.renderToString(
    <CommentBox data={data}/>
  );
};

renderClient = function (title, items, identifier, workspace) {
  var data = {
    title: title,
    items: items,
    identifier: identifier,
    workspace: workspace,
    socketService: new SocketService()
  };
  React.render(
    <CommentBox data={data}/>,
    document.getElementById(identifier)
  );
};